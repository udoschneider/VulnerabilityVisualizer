Class {
	#name : #SyftArtifactRelationship,
	#superclass : #SyftObject,
	#instVars : [
		'type',
		'parent',
		'metadata',
		'child'
	],
	#category : #'Syft-Core'
}

{ #category : #accessing }
SyftArtifactRelationship class >> neoJsonMapping: mapper [

	mapper for: self do: [ :mapping | 
		mapping mapInstVars: #( type parent metadata child ).
		
		(mapping mapInstVar: #parent) valueSchema: UUID.
		(mapping mapInstVar: #child) valueSchema: UUID ]
]

{ #category : #accessing }
SyftArtifactRelationship >> child [
	^ child
]

{ #category : #accessing }
SyftArtifactRelationship >> child: anObject [

	child := anObject
]

{ #category : #accessing }
SyftArtifactRelationship >> metadata [

	^ metadata
]

{ #category : #accessing }
SyftArtifactRelationship >> metadata: anObject [

	metadata := anObject
]

{ #category : #accessing }
SyftArtifactRelationship >> parent [
	^ parent
]

{ #category : #accessing }
SyftArtifactRelationship >> parent: anObject [

	parent := anObject
]

{ #category : #printing }
SyftArtifactRelationship >> printOn: aStream [

	super printOn: aStream.

	aStream
		space;
		nextPut: $(;
		print: parent;
		nextPutAll: ' -> ';
		print: child
]

{ #category : #accessing }
SyftArtifactRelationship >> type [

	^ type
]

{ #category : #accessing }
SyftArtifactRelationship >> type: anObject [

	type := anObject
]
