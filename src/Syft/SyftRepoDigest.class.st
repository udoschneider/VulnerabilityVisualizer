Class {
	#name : #SyftRepoDigest,
	#superclass : #SyftObject,
	#instVars : [
		'digest',
		'repository'
	],
	#category : #'Syft-Core'
}

{ #category : #'instance creation' }
SyftRepoDigest class >> fromString: aString [

	| splitted |
	splitted := $@ split: aString.
	^ self
		  repository: splitted first
		  digest: (GrypeChecksum fromString: splitted second)
]

{ #category : #accessing }
SyftRepoDigest class >> neoJsonMapping: mapper [

	mapper for: self customDo: [ :mapping | 
		mapping
			decoder: [ :string | self fromString: string ];
			encoder: [ :checksum | self halt ] ]
]

{ #category : #'instance creation' }
SyftRepoDigest class >> repository: aString digest: aDVVGrypeChecksum [

	^ self new
		  setRepository: aString digest: aDVVGrypeChecksum;
		  yourself
]

{ #category : #accessing }
SyftRepoDigest >> digest [

	^ digest
]

{ #category : #accessing }
SyftRepoDigest >> digest: anObject [

	digest := anObject
]

{ #category : #printing }
SyftRepoDigest >> printOn: aStream [

	super printOn: aStream.

	aStream
		space;
		nextPut: $(;
		nextPutAll: repository;
		nextPut: $@;
		print: digest;
		nextPut: $)
]

{ #category : #accessing }
SyftRepoDigest >> repository [

	^ repository
]

{ #category : #accessing }
SyftRepoDigest >> repository: anObject [

	repository := anObject
]

{ #category : #initialization }
SyftRepoDigest >> setRepository: aString digest: aDVVGrypeChecksum [

	repository := aString.
	digest := aDVVGrypeChecksum
]
