Class {
	#name : #SyftModel,
	#superclass : #SyftObject,
	#instVars : [
		'artifacts',
		'artifactRelationships',
		'source',
		'distro',
		'descriptor',
		'schema'
	],
	#category : #'Syft-Core'
}

{ #category : #examples }
SyftModel class >> demo [

	<script: 'self demo inspect'>
	^ self fromFile: FileLocator home / 'syft.json'
]

{ #category : #'instance creation' }
SyftModel class >> fromFile: aFileReference [

	^ (aFileReference readStreamDo: [ :stream | 
		   (NeoJSONReader on: stream) nextAs: self ]) 
]

{ #category : #accessing }
SyftModel class >> neoJsonMapping: mapper [

	super neoJsonMapping: mapper.

	mapper for: self do: [ :mapping | 
		mapping mapInstVars:
			#( #artifactRelationships #artifacts #descriptor #distro #schema
			   #source ).
		(mapping mapInstVar: #artifactRelationships) valueSchema: #ArrayOfArtifactRelationship.
		(mapping mapInstVar: #artifacts) valueSchema: #ArrayOfArtifact.
		(mapping mapInstVar: #descriptor) valueSchema: SyftDescriptor.
		(mapping mapInstVar: #distro) valueSchema: SyftDistro.
		(mapping mapInstVar: #schema) valueSchema: SyftSchema.
		(mapping mapInstVar: #source) valueSchema: SyftSource ].

	mapper for: #Base64EncodedJson customDo: [ :mapping | 
		mapping
			decoder: [ :string | 
				(NeoJSONReader on:
						 (Base64MimeConverter mimeDecodeToChars: string readStream)
							 reset) next ];
			encoder: [ :mimeType | Error notYetImplemented ] ].

	mapper
		for: ZnMimeType customDo: [ :mapping | 
			mapping
				decoder: [ :string | ZnMimeType fromString: string ];
				encoder: [ :mimeType | Error notYetImplemented ] ];
		for: FileReference customDo: [ :mapping | 
		mapping
			decoder: [ :string | string asFileReference ];
			encoder: [ :fileReference | Error notYetImplemented ] ];
		for: UUID customDo: [ :mapping | 
		mapping
			decoder: [ :string | UUID fromString: string ];
			encoder: [ :uuid | Error notYetImplemented ] ].

	mapper
		for: #ArrayOfArtifact
		customDo: [ :mapping | mapping listOfElementSchema: SyftArtifact ];
		for: #ArrayOfCPE
		customDo: [ :mapping | mapping listOfElementSchema: CPE ];
		for: #ArrayOfArtifactRelationship
		customDo: [ :mapping | 
			mapping listOfElementSchema: SyftArtifactRelationship ]
]

{ #category : #accessing }
SyftModel >> artifacts [
	^ artifacts
]

{ #category : #accessing }
SyftModel >> source [
	^ source
]
