Class {
	#name : #GrypeModel,
	#superclass : #GrypeObject,
	#instVars : [
		'matches',
		'source',
		'distro',
		'descriptor'
	],
	#category : #'Grype-Core'
}

{ #category : #examples }
GrypeModel class >> demo [

	<script: 'self demo inspect'>
	^ self fromFile: FileLocator home / 'grype.json'
]

{ #category : #'instance creation' }
GrypeModel class >> fromFile: aFileReference [

	^ (aFileReference readStreamDo: [ :stream | 
		   (NeoJSONReader on: stream) nextAs: self ]) 
]

{ #category : #accessing }
GrypeModel class >> neoJsonMapping: mapper [

	super neoJsonMapping: mapper.
	SyftModel neoJsonMapping: mapper.

	mapper for: self do: [ :mapping | 
		mapping mapInstVars: #( matches source distro descriptor ).
		(mapping mapInstVar: #source) valueSchema: SyftSource.
		(mapping mapInstVar: #distro) valueSchema: SyftDistro.
		(mapping mapInstVar: #descriptor) valueSchema: GrypeDescriptor.
		(mapping mapInstVar: #matches) valueSchema: #ArrayOfMatch ].

	mapper
		for: ZnUrl customDo: [ :mapping | 
			mapping
				decoder: [ :string | ZnUrl fromString: string ];
				encoder: [ :url | Error notYetImplemented ] ];
		for: DateAndTime customDo: [ :mapping | 
		mapping
			decoder: [ :string | DateAndTime fromString: string ];
			encoder: [ :dateAndTime | Error notYetImplemented ] ].

	mapper
		
		for: #ArrayOfMatch
		customDo: [ :mapping | mapping listOfElementSchema: GrypeMatch ]
]

{ #category : #accessing }
GrypeModel >> descriptor [

	^ descriptor
]

{ #category : #accessing }
GrypeModel >> descriptor: anObject [

	descriptor := anObject
]

{ #category : #accessing }
GrypeModel >> distro [

	^ distro
]

{ #category : #accessing }
GrypeModel >> distro: anObject [

	distro := anObject
]

{ #category : #accessing }
GrypeModel >> matches [
	^ matches
]

{ #category : #accessing }
GrypeModel >> matches: anObject [

	matches := anObject
]

{ #category : #accessing }
GrypeModel >> source [

	^ source
]

{ #category : #accessing }
GrypeModel >> source: anObject [

	source := anObject
]
