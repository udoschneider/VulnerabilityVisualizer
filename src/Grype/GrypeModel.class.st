Class {
	#name : #GrypeModel,
	#superclass : #GrypeObject,
	#instVars : [
		'matches',
		'source',
		'distro',
		'descriptor'
	],
	#category : #'Grype-Core'
}

{ #category : #examples }
GrypeModel class >> demo [

	<script: 'self demo inspect'>
	^ self fromFile: FileLocator home / 'grype.json'
]

{ #category : #'instance creation' }
GrypeModel class >> fromFile: aFileReference [

	^ (aFileReference readStreamDo: [ :stream | 
		   (NeoJSONReader on: stream) nextAs: self ]) 
]

{ #category : #accessing }
GrypeModel class >> neoJsonMapping: mapper [

	super neoJsonMapping: mapper.
	SyftModel neoJsonMapping: mapper.

	mapper for: self do: [ :mapping | 
		mapping mapInstVars: #( matches source distro descriptor ).
		(mapping mapInstVar: #source) valueSchema: SyftSource.
		(mapping mapInstVar: #distro) valueSchema: SyftDistro.
		(mapping mapInstVar: #descriptor) valueSchema: GrypeDescriptor.
		(mapping mapInstVar: #matches) valueSchema: #ArrayOfMatch ].

	mapper
		for: ZnUrl customDo: [ :mapping | 
			mapping
				decoder: [ :string | ZnUrl fromString: string ];
				encoder: [ :url | Error notYetImplemented ] ];
		for: DateAndTime customDo: [ :mapping | 
		mapping
			decoder: [ :string | DateAndTime fromString: string ];
			encoder: [ :dateAndTime | Error notYetImplemented ] ].

	mapper
		
		for: #ArrayOfMatch
		customDo: [ :mapping | mapping listOfElementSchema: GrypeMatch ]
]

{ #category : #'as yet unclassified' }
GrypeModel >> inspectorProperties [

	"<inspectorPresentationOrder: 1 title: 'Matches'>"
	^ SpTablePresenter new
		  items: matches;
		  addColumn: ((SpCompositeTableColumn new
				    addColumn: (SpImageTableColumn evaluated: [ :each | 
							     each vulnerability displayIcon ]);
				    addColumn:
					    (SpStringTableColumn evaluated: [ :each | 
							     each vulnerability id ]))
				   title: 'Vulnerability';
				   sortFunction:
					   [ :x :y | 
					   x vulnerability id threeWayCompareTo: y vulnerability id ]
						   asSortFunction;
				   width: 100;
				   yourself);
		  addColumn: ((SpStringTableColumn
				    title: 'Artifact'
				    evaluated: [ :each | each artifact purl ])
				   sortFunction: [ :x :y | 
					   x artifact purl displayString threeWayCompareTo:
							   y artifact purl displayString ] asSortFunction;
				   yourself);
		  addColumn: ((SpLinkTableColumn
				    title: 'Details'
				    evaluated: [ :each | 
					    each vulnerability dataSource displayString ]
				    url: [ :each | each vulnerability dataSource ])
				   sortFunction: [ :x :y | 
					   x vulnerability dataSource displayString threeWayCompareTo:
							   y vulnerability dataSource displayString ] asSortFunction;
				   yourself);
		  beResizable;
		  showColumnHeaders;
		  yourself
]

{ #category : #accessing }
GrypeModel >> matches [
	^ matches
]

{ #category : #accessing }
GrypeModel >> source [

	^ source
]
