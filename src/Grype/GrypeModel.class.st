Class {
	#name : #GrypeModel,
	#superclass : #Object,
	#instVars : [
		'matches',
		'source',
		'distro',
		'descriptor'
	],
	#category : #'Grype-Core'
}

{ #category : #accessing }
GrypeModel class >> neoJsonMapping: mapper [

	mapper for: self do: [ :mapping | 
		mapping mapInstVars: #( matches source distro descriptor ).
		(mapping mapInstVar: #source) valueSchema: GrypeSource.
		(mapping mapInstVar: #distro) valueSchema: GrypeDistro.
		(mapping mapInstVar: #descriptor) valueSchema: GrypeDescriptor.
		(mapping mapInstVar: #matches) valueSchema: #ArrayOfMatch ].

	mapper for: #Base64EncodedJson customDo: [ :mapping | 
		mapping
			decoder: [ :string | 
				(NeoJSONReader on:
						 (Base64MimeConverter mimeDecodeToChars: string readStream)
							 reset) next ];
			encoder: [ :mimeType | Error notYetImplemented ] ].

	mapper
		for: ZnUrl customDo: [ :mapping | 
			mapping
				decoder: [ :string | ZnUrl fromString: string ];
				encoder: [ :url | Error notYetImplemented ] ];
		for: DateAndTime customDo: [ :mapping | 
		mapping
			decoder: [ :string | DateAndTime fromString: string ];
			encoder: [ :dateAndTime | Error notYetImplemented ] ];
		for: FileReference customDo: [ :mapping | 
		mapping
			decoder: [ :string | string asFileReference ];
			encoder: [ :fileReference | Error notYetImplemented ] ];
		for: ZnMimeType customDo: [ :mapping | 
		mapping
			decoder: [ :string | ZnMimeType fromString: string ];
			encoder: [ :mimeType |Error notYetImplemented  ] ].

	mapper
		for: #ArrayOfCPE
		customDo: [ :mapping | mapping listOfElementSchema: CPE ];
		for: #ArrayOfMatch
		customDo: [ :mapping | mapping listOfElementSchema: GrypeMatch ]
]

{ #category : #accessing }
GrypeModel >> matches [
	^ matches
]

{ #category : #accessing }
GrypeModel >> source [

	^ source
]
