Class {
	#name : #GrypeMatch,
	#superclass : #GrypeObject,
	#instVars : [
		'artifact',
		'relatedVulnerabilities',
		'matchDetails',
		'vulnerability'
	],
	#category : #'Grype-Core'
}

{ #category : #accessing }
GrypeMatch class >> neoJsonMapping: mapper [

	mapper for: self do: [ :mapping | 
		mapping mapInstVars:
			#( artifact relatedVulnerabilities matchDetails vulnerability ).

		(mapping mapInstVar: #artifact) valueSchema: SyftArtifact.
		(mapping mapInstVar: #matchDetails) valueSchema: #ArrayOfMatchDetail.
		(mapping mapInstVar: #relatedVulnerabilities) valueSchema:
			#ArrayOfVulnerability.
		(mapping mapInstVar: #vulnerability) valueSchema:
			GrypeVulnerability ].

	mapper
		for: #ArrayOfMatchDetail
		customDo: [ :mapping | 
		mapping listOfElementSchema: GrypeMatchDetails ].
	mapper
		for: #ArrayOfVulnerability
		customDo: [ :mapping | 
		mapping listOfElementSchema: GrypeVulnerability ]
]

{ #category : #accessing }
GrypeMatch >> artifact [
	^ artifact
]

{ #category : #accessing }
GrypeMatch >> artifact: anObject [

	artifact := anObject
]

{ #category : #accessing }
GrypeMatch >> matchDetails [

	^ matchDetails
]

{ #category : #accessing }
GrypeMatch >> matchDetails: anObject [

	matchDetails := anObject
]

{ #category : #printing }
GrypeMatch >> printOn: aStream [

	super printOn: aStream.

	aStream
		space;
		nextPut: $(;
		print: artifact purl;
		nextPutAll: ' / ';
		nextPutAll: vulnerability id;
		nextPut: $)
]

{ #category : #accessing }
GrypeMatch >> relatedVulnerabilities [

	^ relatedVulnerabilities
]

{ #category : #accessing }
GrypeMatch >> relatedVulnerabilities: anObject [

	relatedVulnerabilities := anObject
]

{ #category : #accessing }
GrypeMatch >> vulnerability [
	^ vulnerability
]

{ #category : #accessing }
GrypeMatch >> vulnerability: anObject [

	vulnerability := anObject
]
