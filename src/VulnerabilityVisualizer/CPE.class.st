Class {
	#name : #CPE,
	#superclass : #Object,
	#instVars : [
		'cpeVersion',
		'part',
		'vendor',
		'product',
		'version',
		'update',
		'edition',
		'language',
		'swEdition',
		'targetSw',
		'targetHw',
		'other'
	],
	#category : #VulnerabilityVisualizer
}

{ #category : #'instance creation' }
CPE class >> fromDictionary: aDictionary [

	^ self new
		  parseDictionary: aDictionary;
		  yourself
]

{ #category : #'instance creation' }
CPE class >> fromString: aString [

	| splitted dic |
	splitted := ($: split: aString) readStream.
	self assert: [ splitted next = 'cpe' ].
	dic := Dictionary new.
	#( 'cpe_version' 'part' 'vendor' 'product' 'version' 'update'
	   'edition' 'language' 'sw_edition' 'target_sw' 'target_hw'
	   'other' ) do: [ :each | dic at: each put: splitted next ].
	^ self fromDictionary: dic
]

{ #category : #accessing }
CPE class >> neoJsonMapping: mapper [

	mapper for: self customDo: [ :mapping | 
		mapping
			decoder: [ :string | self fromString: string ];
			encoder: [ :checksum | self halt ] ]
]

{ #category : #parsing }
CPE >> parseDictionary: dic [

	cpeVersion := dic at: 'cpe_version'.
	part := dic at: 'part'.
	vendor := dic at: 'vendor'.
	product := dic at: 'product'.
	version := dic at: 'version'.
	update := dic at: 'update'.
	edition := dic at: 'edition'.
	language := dic at: 'language'.
	swEdition := dic at: 'sw_edition'.
	targetSw := dic at: 'target_sw'.
	targetHw := dic at: 'target_hw'.
	other := dic at: 'other'
]

{ #category : #printing }
CPE >> printOn: aStream [

	aStream
		nextPutAll: 'cpe';
		nextPut: $:;
		nextPutAll: cpeVersion;
		nextPut: $:;
		nextPutAll: part;
		nextPut: $:;
		nextPutAll: vendor;
		nextPut: $:;
		nextPutAll: product;
		nextPut: $:;
		nextPutAll: version;
		nextPut: $:;
		nextPutAll: update;
		nextPut: $:;
		nextPutAll: edition;
		nextPut: $:;
		nextPutAll: language;
		nextPut: $:;
		nextPutAll: swEdition;
		nextPut: $:;
		nextPutAll: targetSw;
		nextPut: $:;
		nextPutAll: targetHw;
		nextPut: $:;
		nextPutAll: other
]
