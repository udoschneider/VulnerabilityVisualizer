Class {
	#name : #VVPackage,
	#superclass : #Model,
	#instVars : [
		'packageUrl',
		'properties'
	],
	#category : #'VulnerabilityVisualizer-Core'
}

{ #category : #accessing }
VVPackage class >> packageUrl: aPackageUrl [

	| packageClass |
	packageClass := aPackageUrl type = 'docker'
		                ifTrue: [ VVImage ]
		                ifFalse: [ self ].
	^ packageClass new
		  setPackageUrl: aPackageUrl;
		  yourself
]

{ #category : #accessing }
VVPackage class >> packageUrlString: aString [

	^ self packageUrl: (PackageUrl fromString: aString)
]

{ #category : #initialization }
VVPackage >> initialize [

	super initialize.
	properties := Dictionary new
]

{ #category : #accessing }
VVPackage >> packageUrl [
	^ packageUrl
]

{ #category : #printing }
VVPackage >> printOn: aStream [
super printOn: aStream.

aStream space; nextPut: $(; print: packageUrl ; nextPut: $)
]

{ #category : #accessing }
VVPackage >> propertyAt: key [ 

	^ properties at: key
]

{ #category : #accessing }
VVPackage >> propertyAt: key ifAbsent: aBlock [

	^ properties at: key ifAbsent: aBlock
]

{ #category : #accessing }
VVPackage >> propertyAt: key put: value [

	^ properties at: key value
]

{ #category : #initialization }
VVPackage >> setPackageUrl: aPackageUrl [

	packageUrl := aPackageUrl
]
