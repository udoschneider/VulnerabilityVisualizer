Class {
	#name : #VVLinkPackagesCommand,
	#superclass : #VVCommand,
	#instVars : [
		'rateLimiter',
		'libIoApi'
	],
	#classInstVars : [
		'Cache'
	],
	#category : #'VulnerabilityVisualizer-UI'
}

{ #category : #origins }
VVLinkPackagesCommand class >> cache [

	^ Cache ifNil: [ 
		  Cache := TTLCache  new
			           maximumWeight: 512;
			           timeToLive: 1 hour;
			           yourself ]
]

{ #category : #initialization }
VVLinkPackagesCommand >> depsForNpmPackage: package [

	| response json |
	response := self class cache at: package ifAbsentPut: [ 
		            rateLimiter do: [ 
			            (((libIoApi platform: 'NPM') project:
				              package packageUrl name) dependencies: 'latest')
				            contents ] ].


	json := STON fromString: response.
	(json includesKey: 'error') ifTrue: [ ^ #(  ) ].

	^ (json at: 'dependencies') collect: [ :each | each at: 'name' ]
]

{ #category : #initialization }
VVLinkPackagesCommand >> depsForPackage: package [

	package isNpm ifTrue: [ ^self depsForNpmPackage: package ] .
	
^#()
]

{ #category : #initialization }
VVLinkPackagesCommand >> execute [

	| project packages |
	project := self context selectedProject.
	packages := project packages values first: 100.
	[ :job | 
	job max: packages size.
	packages collect: [ :package | 
		| deps |
		job
			increment;
			title: 'Resolving links for ' , package packageUrl printString.
		deps := self depsForPackage: package.
		deps do: [ :each | project linkPackage: package toPackageNamd: each ] ].
	
	self context updatePresenter  ]
		asJob run
]

{ #category : #initialization }
VVLinkPackagesCommand >> initialize [

	super initialize.
	self
		name: 'Link Packages';
		description: 'Link Packages'.
	libIoApi := LibrariesIoApi defineApi
		            parameter: #apiKey
		            do: [ :parameter | 
			            parameter default: '9239a658f9a238a3b80cce555953c797' ];
		            yourself.
	rateLimiter := RateLimiter limitTo: 59 per: 1 second
]

{ #category : #initialization }
VVLinkPackagesCommand >> scrap [

"
(rateLimiter do: [ 
			  STON fromString:
				  (((libIoApi platform: package packageUrl type asUppercase) 
					    project: package packageUrl name) dependencies: 'latest')
					  contents ])"
]
