Class {
	#name : #RateLimiter,
	#superclass : #Object,
	#instVars : [
		'limit',
		'duration',
		'requests'
	],
	#category : #'VulnerabilityVisualizer-UI'
}

{ #category : #'as yet unclassified' }
RateLimiter class >> limitTo: anInteger per: aDuration [
^self new setLimit: anInteger duration: aDuration; yourself
]

{ #category : #initialization }
RateLimiter >> do: aBlock [

	| result now |
	self waitNext.
	now := DateAndTime now.
	result := aBlock value.
	requests add: now.
	^ result
]

{ #category : #initialization }
RateLimiter >> expireRequests [

	| now cutoff oldSize |
	now := DateAndTime now.
	cutoff := now - (duration * limit).
	oldSize := requests size.

	requests := requests reject: [ :each | each < cutoff ].
	oldSize ~= requests size ifTrue:
	[
	Transcript
		show: 'Reduced queue from ' , oldSize printString , ' to '
			, requests size printString;
		cr]
]

{ #category : #initialization }
RateLimiter >> initialize [

	super initialize.
	requests := OrderedCollection new.
	limit := 60.
	duration := 1 second
]

{ #category : #initialization }
RateLimiter >> setLimit: anInteger duration: aDuration [
		 limit := anInteger.
		duration := aDuration
]

{ #category : #initialization }
RateLimiter >> waitNext [

	[ 
	self expireRequests.
	requests size > limit ] whileTrue: [ 
		| delay |
		self halt.
		delay := DateAndTime now - requests first.
		Transcript
			show: 'Waiting for ' , delay printString;
			cr.
		delay wait ]
]
