Extension { #name : #Dictionary }

{ #category : #'*VulnerabilityVisualizer' }
Dictionary >> asJsonMappingMethod [

	| unmapped mapped |
	unmapped := OrderedCollection new.
	mapped := OrderedCollection new.

	self keys sorted do: [ :key | 
		| camelized |
		key.
		camelized := (Character space join: ($_ split: key)) asCamelCase
			             uncapitalized.
		key = camelized
			ifTrue: [ unmapped add: key ]
			ifFalse: [ mapped add: key -> camelized  ] ].


	^ String streamContents: [ :stream | 
		  stream
			  nextPutAll: 'neoJsonMapping: mapper';
			  cr.
		  stream
			  nextPutAll: '	super neoJsonMapping: mapper.';
			  cr;
			  cr.
		  stream
			  nextPutAll: '	mapper for: self do: [:mapping |';
			  cr.
		  stream
			  nextPutAll: '		mapping mapInstVars: #(';
			  nextPutAll: (Character space join: unmapped);
			  nextPutAll: ').';
			  cr;
			  cr.

		  mapped do: [ :assoc | 
			  stream
				  nextPutAll: '			mapping mapInstVar: #';
				  nextPutAll: assoc value;
				  nextPutAll: ' to: ''';
				  nextPutAll: assoc key;
				  nextPutAll: '''.';
				  cr ].

		  stream
			  nextPutAll: ']';
			  cr ]
]
