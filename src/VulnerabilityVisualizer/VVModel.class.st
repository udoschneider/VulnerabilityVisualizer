Class {
	#name : #VVModel,
	#superclass : #Object,
	#category : #'VulnerabilityVisualizer-Core'
}

{ #category : #'as yet unclassified' }
VVModel class >> grypeJson: imageName [

	<script: '(self grypeJson: ''alpine'') inspect'>
	^ NeoJSONReader fromString: (self grypeRaw: imageName)
]

{ #category : #'as yet unclassified' }
VVModel class >> grypeParsed: imageName [

	<script: '(self grypeParsed: ''alpine'') inspect'>
	^ NeoJSONReader fromString: (self grypeRaw: imageName) as: GrypeModel
]

{ #category : #'as yet unclassified' }
VVModel class >> grypeRaw: imageName [

	<script: '(self grypeRaw: ''alpine'') inspect'>
	^ self runCommand: '/usr/local/bin/grype' arguments: { 
			  imageName.
			  '-o'.
			  'json' }
]

{ #category : #'as yet unclassified' }
VVModel class >> runCommand: command arguments: arguments [

	<script:
	'(self runCommand: ''/usr/bin/ls'' arguments: #( ''-al'' ''/'' )) inspect'>
	OSSUnixSubprocess new
		command: command;
		arguments: arguments;
		redirectStdout;
		redirectStderr;
		runAndWaitPollingEvery: (Delay forMilliseconds: 50)
		retrievingStreams: true
		onExitDo: [ :process :outString :errString | 
			^ process isSuccess
				  ifFalse: [ Error signal: errString ]
				  ifTrue: [ outString ] ]
]

{ #category : #'as yet unclassified' }
VVModel class >> syftJson: imageName [

	<script: '(self syftJson: ''alpine'') inspect'>
	^ NeoJSONReader fromString: (self syftRaw: imageName)
]

{ #category : #'as yet unclassified' }
VVModel class >> syftParsed: imageName [

	<script: '(self syftParsed: ''alpine'') inspect'>
	^ NeoJSONReader fromString: (self syftRaw: imageName) as: SyftModel
]

{ #category : #'as yet unclassified' }
VVModel class >> syftRaw: imageName [

	<script: '(self syftRaw: ''alpine'') inspect'>
	^ self runCommand: '/usr/local/bin/syft' arguments: { 
			  'packages'.
			  imageName.
			  '-o'.
			  'json' }
]
