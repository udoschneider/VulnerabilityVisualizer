Class {
	#name : #VVProject,
	#superclass : #Model,
	#instVars : [
		'name',
		'packages',
		'links'
	],
	#classInstVars : [
		'Cache'
	],
	#category : #'VulnerabilityVisualizer-Core'
}

{ #category : #origins }
VVProject class >> cache [
^Cache ifNil: [ Cache := TTLCache new ].
]

{ #category : #examples }
VVProject class >> example [

	
| project package |
project := VVProject new.
package := project addImageNamed: 'alpine'.
(Syfter on: project) process: package.
^project
]

{ #category : #'as yet unclassified' }
VVProject class >> grypeJson: imageName [

	<script: '(self grypeJson: ''alpine'') inspect'>
	^ NeoJSONReader fromString: (self grypeString: imageName)
]

{ #category : #'as yet unclassified' }
VVProject class >> grypeParsed: imageName [

	<script: '(self grypeParsed: ''alpine'') inspect'>
	^ NeoJSONReader fromString: (self grypeString: imageName) as: GrypeModel
]

{ #category : #'as yet unclassified' }
VVProject class >> grypeString: imageName [

	<script: '(self grypeString: ''alpine'') inspect'>
	^ self cache at: 'grype-' , imageName ifAbsentPut: [ 
		  self runCommand: '/usr/local/bin/grype' arguments: { 
				  imageName.
				  '-o'.
				  'json' } ]
]

{ #category : #'as yet unclassified' }
VVProject class >> runCommand: command arguments: arguments [

	<script:
	'(self runCommand: ''/usr/bin/ls'' arguments: #( ''-al'' ''/'' )) inspect'>
	OSSUnixSubprocess new
		command: command;
		arguments: arguments;
		redirectStdout;
		redirectStderr;
		runAndWaitPollingEvery: (Delay forMilliseconds: 50)
		retrievingStreams: true
		onExitDo: [ :process :outString :errString | 
			^ process isSuccess
				  ifFalse: [ Error signal: errString ]
				  ifTrue: [ outString ] ]
]

{ #category : #'as yet unclassified' }
VVProject class >> syftJson: imageName [

	<script: '(self syftJson: ''alpine'') inspect'>
	^ NeoJSONReader fromString: (self syftString: imageName)
]

{ #category : #'as yet unclassified' }
VVProject class >> syftParsed: imageName [

	<script: '(self syftParsed: ''alpine'') inspect'>
	^ NeoJSONReader fromString: (self syftString: imageName) as: SyftModel
]

{ #category : #'as yet unclassified' }
VVProject class >> syftString: imageName [

	<script: '(self syftString: ''alpine'') inspect'>
	^ self cache at: 'syft-' , imageName ifAbsentPut: [ 
		  self runCommand: '/usr/local/bin/syft' arguments: { 
				  'packages'.
				  imageName.
				  '-o'.
				  'json' } ]
]

{ #category : #adding }
VVProject >> addImageNamed: imageName [

	| packageUrl package |
	packageUrl := PackageUrl dockerName: imageName.
	package := VVPackage packageUrl: packageUrl.
	^ packages at: packageUrl put: package
]

{ #category : #adding }
VVProject >> addPackage: aPackage [

	^ packages at: aPackage packageUrl put: aPackage
]

{ #category : #adding }
VVProject >> initialize [

	super initialize.
	packages := Dictionary new.
	links := Dictionary  new
]

{ #category : #adding }
VVProject >> linkPackage: parentPackage toPackageNamd: aString [

self packages values
		                 select: [ :each | 
			                 each packageUrl type
			                 = parentPackage packageUrl type and: [ 
				                 each packageUrl name = aString ] ]
		                 thenDo: [ :each | 
		                 (links at: parentPackage ifAbsentPut: Set new) 
			                 add: each ]
]

{ #category : #adding }
VVProject >> linksFor: aPackage [
^links at: aPackage ifAbsent: #()
]

{ #category : #accessing }
VVProject >> name [

	^ name
]

{ #category : #accessing }
VVProject >> name: aString [

	name := aString.
	self valueChanged 
]

{ #category : #accessing }
VVProject >> packages [

	^ packages
]

{ #category : #cleaning }
VVProject >> removeNonNpmPackages [

	packages := packages select: #isNpm
]
