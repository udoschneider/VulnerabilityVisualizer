Class {
	#name : #VVMainPresenter,
	#superclass : #SpPresenter,
	#instVars : [
		'projectList',
		'projectNotebook',
		'projectInformationPresenter',
		'projectTreePresenter'
	],
	#category : #'VulnerabilityVisualizer-UI'
}

{ #category : #specs }
VVMainPresenter class >> addPackageCommandFor: presenter [

	^ VVAddPackageCommand  forSpec
		  context: presenter;
		  yourself
]

{ #category : #specs }
VVMainPresenter class >> addProjectCommandFor: presenter [

	^ (VVAddProject forSpecWithIconNamed: #smallAdd)
		  context: presenter;
	
		  yourself
]

{ #category : #specs }
VVMainPresenter class >> buildCommandsGroupWith: presenter forRoot: rootCommandGroup [

	rootCommandGroup
		register: (self addProjectCommandFor: presenter);
		register: (self removeProjectCommandFor: presenter);
		register: (self renameProjectCommandFor: presenter);
		register: (self addPackageCommandFor: presenter);
			register: (self linkPackagesCommandFor:  presenter)
]

{ #category : #specs }
VVMainPresenter class >> defaultSpec [

	^ SpPanedLayout newLeftToRight
		  positionOfSlider: 1 / 4;
		  add: #projectList;
		  add: #projectNotebook;
		  yourself
]

{ #category : #specs }
VVMainPresenter class >> example [

	VVMainPresenter new openWithSpec
]

{ #category : #specs }
VVMainPresenter class >> linkPackagesCommandFor: presenter [

	^ VVLinkPackagesCommand  forSpec
		  context: presenter;
		  yourself
]

{ #category : #specs }
VVMainPresenter class >> removeProjectCommandFor: presenter [

	^ (VVRemoveProject forSpecWithIconNamed: #smallDelete)
		  context: presenter;
		  yourself
]

{ #category : #specs }
VVMainPresenter class >> renameProjectCommandFor: presenter [

	^ (VVRenameProject  forSpec)
		  context: presenter;
		  yourself
]

{ #category : #actions }
VVMainPresenter >> addProject: aProject [

	self application addProject: aProject.
	self updatePresenter 
]

{ #category : #initialization }
VVMainPresenter >> connectPresenters [

"	textField whenTextChangedDo: [ :text | 
		self class environment
			at: text asSymbol
			ifPresent: [ :class | methodBrowser messages: class methods ]
			ifAbsent: [ methodBrowser messages: #(  ) ] ]"
]

{ #category : #initialization }
VVMainPresenter >> initializePresenters [

	super initializePresenters.

	projectList := self newTable
		               contextMenu: [ 
			               self rootCommandsGroup beRoot asMenuPresenter ];
		               addColumn: (SpStringTableColumn
				                title: 'Name'
				                evaluated: [ :project | project name ]);
		               yourself.

	projectTreePresenter := (self instantiate: SpRoassalPresenter) 
		                        script: [ :view | self renderRoasall: view ].


	projectNotebook := self newNotebook
		                   addPage: self projectTreePage;
		                   yourself.

	projectInformationPresenter := self instantiate:
		                               VVProjectInformationPresenter.

	projectList transmitTo: projectInformationPresenter.
	projectList whenSelectedDo: [ :item | 
		projectTreePresenter refresh ].


	self updatePresenter
]

{ #category : #initialization }
VVMainPresenter >> initializeWindow: aWindowPresenter [



	aWindowPresenter
		title: 'Vulnerability Visualizer';
		initialExtent: 800 @ 600;
		toolbar: (self newToolbar
				 addItem: (self class addProjectCommandFor: self) asToolbarButton;
				 yourself)
]

{ #category : #initialization }
VVMainPresenter >> projectInformationPage [

	^ (SpNotebookPage
		   title: 'Information'
		   icon: (self iconNamed: #nautilusIcon)
		   provider: [ projectInformationPresenter  ])
		  beCloseable;
		  yourself
]

{ #category : #initialization }
VVMainPresenter >> projectTreePage [

	^ (SpNotebookPage
		   title: 'Packages'
		   icon: (self iconNamed: #nautilusIcon)
		   provider: [ projectTreePresenter ])
		  beCloseable;
		  yourself
]

{ #category : #accessing }
VVMainPresenter >> projects [
^self application projects
]

{ #category : #actions }
VVMainPresenter >> removeProject: aVVProject [

		self application removeProject: aVVProject.
	self updatePresenter
]

{ #category : #initialization }
VVMainPresenter >> renderRoasall: canvas [

	| eb |
	self selectedProject ifNotNil: [ :project | 
		| packages labels |
		packages := project packages values.
		labels := packages collect: [ :package | 
			          | label |
			          "label := RSLabel new
					                   text: package packageUrl asString;
					                   model: package."
			          label := RSEllipse new
				                   size: 5;
				                   model: package.
			          label when: RSMouseClick do: [ :evt | evt inspect ] ].

		canvas addAll: labels.

		RSEdgeBuilder arrowedLine
			canvas: canvas;
			shapes: labels;
			connectToAll: [ :package | project linksFor: package ].


		RSForceBasedLayout  on: labels.

		"labels @ RSPopup @ RSDraggable."


		canvas canvas @ RSCanvasController ]
]

{ #category : #accessing }
VVMainPresenter >> selectedProject [
	^projectList selectedItem
]

{ #category : #initialization }
VVMainPresenter >> updatePresenter [

	projectList items: self projects.
	projectTreePresenter refresh
]
